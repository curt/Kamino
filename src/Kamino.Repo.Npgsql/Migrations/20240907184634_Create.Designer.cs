// <auto-generated />
using System;
using Kamino.Entities;
using Kamino.Repo.Npgsql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kamino.Repo.Npgsql.Migrations
{
    [DbContext(typeof(NpgsqlContext))]
    [Migration("20240907184634_Create")]
    partial class Create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "post_type", new[] { "none", "article", "note", "review", "check_in", "event" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "source_type", new[] { "none", "markdown", "plain", "html" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kamino.Entities.Place", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)")
                        .HasColumnName("location");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<SourceType>("SourceType")
                        .HasColumnType("source_type")
                        .HasColumnName("source_type");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("TombstonedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tombstoned_at");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_places");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_places_author_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_places_tag_id");

                    b.HasIndex("Uri")
                        .IsUnique()
                        .HasDatabaseName("ix_places_uri");

                    b.ToTable("places", (string)null);
                });

            modelBuilder.Entity("Kamino.Entities.Post", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<DateTime?>("CachedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cached_at");

                    b.Property<string>("ContextUri")
                        .HasColumnType("text")
                        .HasColumnName("context_uri");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<DateTime?>("EndsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ends_at");

                    b.Property<string>("InReplyToUri")
                        .HasColumnType("text")
                        .HasColumnName("in_reply_to_uri");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<PostType>("PostType")
                        .HasColumnType("post_type")
                        .HasColumnName("post_type");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<SourceType>("SourceType")
                        .HasColumnType("source_type")
                        .HasColumnName("source_type");

                    b.Property<DateTime?>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("TombstonedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tombstoned_at");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_posts_author_id");

                    b.HasIndex("Uri")
                        .IsUnique()
                        .HasDatabaseName("ix_posts_uri");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("Kamino.Entities.Profile", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CachedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cached_at");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Inbox")
                        .HasColumnType("text")
                        .HasColumnName("inbox");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("text")
                        .HasColumnName("private_key");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text")
                        .HasColumnName("public_key");

                    b.Property<string>("PublicKeyId")
                        .HasColumnType("text")
                        .HasColumnName("public_key_id");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<DateTime?>("TombstonedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tombstoned_at");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_profiles");

                    b.HasIndex("Uri")
                        .IsUnique()
                        .HasDatabaseName("ix_profiles_uri");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("Kamino.Entities.Tag", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NormalizedTitle")
                        .HasColumnType("text")
                        .HasColumnName("normalized_title");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<SourceType>("SourceType")
                        .HasColumnType("source_type")
                        .HasColumnName("source_type");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("PlacesTags", b =>
                {
                    b.Property<Guid>("PlacesId")
                        .HasColumnType("uuid")
                        .HasColumnName("places_id");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid")
                        .HasColumnName("tags_id");

                    b.HasKey("PlacesId", "TagsId")
                        .HasName("pk_places_tags");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_places_tags_tags_id");

                    b.ToTable("places_tags", (string)null);
                });

            modelBuilder.Entity("PostsPlaces", b =>
                {
                    b.Property<Guid>("PlacesId")
                        .HasColumnType("uuid")
                        .HasColumnName("places_id");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid")
                        .HasColumnName("tags_id");

                    b.HasKey("PlacesId", "TagsId")
                        .HasName("pk_posts_places");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_posts_places_tags_id");

                    b.ToTable("posts_places", (string)null);
                });

            modelBuilder.Entity("PostsTags", b =>
                {
                    b.Property<Guid>("PostsId")
                        .HasColumnType("uuid")
                        .HasColumnName("posts_id");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid")
                        .HasColumnName("tags_id");

                    b.HasKey("PostsId", "TagsId")
                        .HasName("pk_posts_tags");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_posts_tags_tags_id");

                    b.ToTable("posts_tags", (string)null);
                });

            modelBuilder.Entity("Kamino.Entities.Place", b =>
                {
                    b.HasOne("Kamino.Entities.Profile", "Author")
                        .WithMany("PlacesAuthored")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_places_profiles_author_id");

                    b.HasOne("Kamino.Entities.Tag", null)
                        .WithMany("Places")
                        .HasForeignKey("TagId")
                        .HasConstraintName("fk_places_tags_tag_id");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Kamino.Entities.Post", b =>
                {
                    b.HasOne("Kamino.Entities.Profile", "Author")
                        .WithMany("PostsAuthored")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_profiles_author_id");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("PlacesTags", b =>
                {
                    b.HasOne("Kamino.Entities.Place", null)
                        .WithMany()
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_places_tags_places_places_id");

                    b.HasOne("Kamino.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_places_tags_posts_tags_id");
                });

            modelBuilder.Entity("PostsPlaces", b =>
                {
                    b.HasOne("Kamino.Entities.Place", null)
                        .WithMany()
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_places_places_places_id");

                    b.HasOne("Kamino.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_places_posts_tags_id");
                });

            modelBuilder.Entity("PostsTags", b =>
                {
                    b.HasOne("Kamino.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_tags_posts_posts_id");

                    b.HasOne("Kamino.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_tags_tags_tags_id");
                });

            modelBuilder.Entity("Kamino.Entities.Profile", b =>
                {
                    b.Navigation("PlacesAuthored");

                    b.Navigation("PostsAuthored");
                });

            modelBuilder.Entity("Kamino.Entities.Tag", b =>
                {
                    b.Navigation("Places");
                });
#pragma warning restore 612, 618
        }
    }
}
